/* docklet-capture.h generated by valac 0.34.4, the Vala compiler, do not modify */


#ifndef __DOCKLET_CAPTURE_H__
#define __DOCKLET_CAPTURE_H__

#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <plank.h>
#include <gio/gio.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <granite.h>
#include <gdk/gdk.h>
#include <cairo.h>
#include <gdk-pixbuf/gdk-pixbuf.h>

G_BEGIN_DECLS


#define CAPTURE_TYPE_CAPTURE_MODE (capture_capture_mode_get_type ())

#define CAPTURE_TYPE_CAPTURE_DOCK_ITEM (capture_capture_dock_item_get_type ())
#define CAPTURE_CAPTURE_DOCK_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CAPTURE_TYPE_CAPTURE_DOCK_ITEM, CaptureCaptureDockItem))
#define CAPTURE_CAPTURE_DOCK_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), CAPTURE_TYPE_CAPTURE_DOCK_ITEM, CaptureCaptureDockItemClass))
#define CAPTURE_IS_CAPTURE_DOCK_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CAPTURE_TYPE_CAPTURE_DOCK_ITEM))
#define CAPTURE_IS_CAPTURE_DOCK_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), CAPTURE_TYPE_CAPTURE_DOCK_ITEM))
#define CAPTURE_CAPTURE_DOCK_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CAPTURE_TYPE_CAPTURE_DOCK_ITEM, CaptureCaptureDockItemClass))

typedef struct _CaptureCaptureDockItem CaptureCaptureDockItem;
typedef struct _CaptureCaptureDockItemClass CaptureCaptureDockItemClass;
typedef struct _CaptureCaptureDockItemPrivate CaptureCaptureDockItemPrivate;

#define CAPTURE_TYPE_SCREEN_GRAB_MODE (capture_screen_grab_mode_get_type ())

#define CAPTURE_TYPE_CAPTURE_DOCKLET (capture_capture_docklet_get_type ())
#define CAPTURE_CAPTURE_DOCKLET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CAPTURE_TYPE_CAPTURE_DOCKLET, CaptureCaptureDocklet))
#define CAPTURE_CAPTURE_DOCKLET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), CAPTURE_TYPE_CAPTURE_DOCKLET, CaptureCaptureDockletClass))
#define CAPTURE_IS_CAPTURE_DOCKLET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CAPTURE_TYPE_CAPTURE_DOCKLET))
#define CAPTURE_IS_CAPTURE_DOCKLET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), CAPTURE_TYPE_CAPTURE_DOCKLET))
#define CAPTURE_CAPTURE_DOCKLET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CAPTURE_TYPE_CAPTURE_DOCKLET, CaptureCaptureDockletClass))

typedef struct _CaptureCaptureDocklet CaptureCaptureDocklet;
typedef struct _CaptureCaptureDockletClass CaptureCaptureDockletClass;
typedef struct _CaptureCaptureDockletPrivate CaptureCaptureDockletPrivate;

#define CAPTURE_TYPE_CAPTURE_PREFERENCES (capture_capture_preferences_get_type ())
#define CAPTURE_CAPTURE_PREFERENCES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CAPTURE_TYPE_CAPTURE_PREFERENCES, CaptureCapturePreferences))
#define CAPTURE_CAPTURE_PREFERENCES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), CAPTURE_TYPE_CAPTURE_PREFERENCES, CaptureCapturePreferencesClass))
#define CAPTURE_IS_CAPTURE_PREFERENCES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CAPTURE_TYPE_CAPTURE_PREFERENCES))
#define CAPTURE_IS_CAPTURE_PREFERENCES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), CAPTURE_TYPE_CAPTURE_PREFERENCES))
#define CAPTURE_CAPTURE_PREFERENCES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CAPTURE_TYPE_CAPTURE_PREFERENCES, CaptureCapturePreferencesClass))

typedef struct _CaptureCapturePreferences CaptureCapturePreferences;
typedef struct _CaptureCapturePreferencesClass CaptureCapturePreferencesClass;
typedef struct _CaptureCapturePreferencesPrivate CaptureCapturePreferencesPrivate;

#define CAPTURE_TYPE_CAPTURE_PREVIEW (capture_capture_preview_get_type ())
#define CAPTURE_CAPTURE_PREVIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CAPTURE_TYPE_CAPTURE_PREVIEW, CaptureCapturePreview))
#define CAPTURE_CAPTURE_PREVIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), CAPTURE_TYPE_CAPTURE_PREVIEW, CaptureCapturePreviewClass))
#define CAPTURE_IS_CAPTURE_PREVIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CAPTURE_TYPE_CAPTURE_PREVIEW))
#define CAPTURE_IS_CAPTURE_PREVIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), CAPTURE_TYPE_CAPTURE_PREVIEW))
#define CAPTURE_CAPTURE_PREVIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CAPTURE_TYPE_CAPTURE_PREVIEW, CaptureCapturePreviewClass))

typedef struct _CaptureCapturePreview CaptureCapturePreview;
typedef struct _CaptureCapturePreviewClass CaptureCapturePreviewClass;
typedef struct _CaptureCapturePreviewPrivate CaptureCapturePreviewPrivate;

#define CAPTURE_TYPE_SEQUENCE (capture_sequence_get_type ())
#define CAPTURE_SEQUENCE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CAPTURE_TYPE_SEQUENCE, CaptureSequence))
#define CAPTURE_SEQUENCE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), CAPTURE_TYPE_SEQUENCE, CaptureSequenceClass))
#define CAPTURE_IS_SEQUENCE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CAPTURE_TYPE_SEQUENCE))
#define CAPTURE_IS_SEQUENCE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), CAPTURE_TYPE_SEQUENCE))
#define CAPTURE_SEQUENCE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CAPTURE_TYPE_SEQUENCE, CaptureSequenceClass))

typedef struct _CaptureSequence CaptureSequence;
typedef struct _CaptureSequenceClass CaptureSequenceClass;

#define CAPTURE_TYPE_COUNTDOWN (capture_countdown_get_type ())
#define CAPTURE_COUNTDOWN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CAPTURE_TYPE_COUNTDOWN, CaptureCountdown))
#define CAPTURE_COUNTDOWN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), CAPTURE_TYPE_COUNTDOWN, CaptureCountdownClass))
#define CAPTURE_IS_COUNTDOWN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CAPTURE_TYPE_COUNTDOWN))
#define CAPTURE_IS_COUNTDOWN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), CAPTURE_TYPE_COUNTDOWN))
#define CAPTURE_COUNTDOWN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CAPTURE_TYPE_COUNTDOWN, CaptureCountdownClass))

typedef struct _CaptureCountdown CaptureCountdown;
typedef struct _CaptureCountdownClass CaptureCountdownClass;
typedef struct _CaptureCountdownPrivate CaptureCountdownPrivate;

#define CAPTURE_TYPE_DRAG_STATUS (capture_drag_status_get_type ())

#define CAPTURE_TYPE_SELECTION_MODE (capture_selection_mode_get_type ())

#define CAPTURE_TYPE_REGION_SELECT (capture_region_select_get_type ())
#define CAPTURE_REGION_SELECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CAPTURE_TYPE_REGION_SELECT, CaptureRegionSelect))
#define CAPTURE_REGION_SELECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), CAPTURE_TYPE_REGION_SELECT, CaptureRegionSelectClass))
#define CAPTURE_IS_REGION_SELECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CAPTURE_TYPE_REGION_SELECT))
#define CAPTURE_IS_REGION_SELECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), CAPTURE_TYPE_REGION_SELECT))
#define CAPTURE_REGION_SELECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CAPTURE_TYPE_REGION_SELECT, CaptureRegionSelectClass))

typedef struct _CaptureRegionSelect CaptureRegionSelect;
typedef struct _CaptureRegionSelectClass CaptureRegionSelectClass;
typedef struct _CaptureRegionSelectPrivate CaptureRegionSelectPrivate;

#define CAPTURE_TYPE_SCREEN_GRABBER (capture_screen_grabber_get_type ())
#define CAPTURE_SCREEN_GRABBER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CAPTURE_TYPE_SCREEN_GRABBER, CaptureScreenGrabber))
#define CAPTURE_SCREEN_GRABBER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), CAPTURE_TYPE_SCREEN_GRABBER, CaptureScreenGrabberClass))
#define CAPTURE_IS_SCREEN_GRABBER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CAPTURE_TYPE_SCREEN_GRABBER))
#define CAPTURE_IS_SCREEN_GRABBER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), CAPTURE_TYPE_SCREEN_GRABBER))
#define CAPTURE_SCREEN_GRABBER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CAPTURE_TYPE_SCREEN_GRABBER, CaptureScreenGrabberClass))

typedef struct _CaptureScreenGrabber CaptureScreenGrabber;
typedef struct _CaptureScreenGrabberClass CaptureScreenGrabberClass;
typedef struct _CaptureScreenGrabberPrivate CaptureScreenGrabberPrivate;
typedef struct _CaptureSequencePrivate CaptureSequencePrivate;

#define CAPTURE_TYPE_SETTINGS_DIALOG (capture_settings_dialog_get_type ())
#define CAPTURE_SETTINGS_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CAPTURE_TYPE_SETTINGS_DIALOG, CaptureSettingsDialog))
#define CAPTURE_SETTINGS_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), CAPTURE_TYPE_SETTINGS_DIALOG, CaptureSettingsDialogClass))
#define CAPTURE_IS_SETTINGS_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CAPTURE_TYPE_SETTINGS_DIALOG))
#define CAPTURE_IS_SETTINGS_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), CAPTURE_TYPE_SETTINGS_DIALOG))
#define CAPTURE_SETTINGS_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CAPTURE_TYPE_SETTINGS_DIALOG, CaptureSettingsDialogClass))

typedef struct _CaptureSettingsDialog CaptureSettingsDialog;
typedef struct _CaptureSettingsDialogClass CaptureSettingsDialogClass;
typedef struct _CaptureSettingsDialogPrivate CaptureSettingsDialogPrivate;

typedef enum  {
	CAPTURE_CAPTURE_MODE_SCREENSHOT,
	CAPTURE_CAPTURE_MODE_SCREENCAST
} CaptureCaptureMode;

struct _CaptureCaptureDockItem {
	PlankDockletItem parent_instance;
	CaptureCaptureDockItemPrivate * priv;
};

struct _CaptureCaptureDockItemClass {
	PlankDockletItemClass parent_class;
};

typedef enum  {
	CAPTURE_SCREEN_GRAB_MODE_DESKTOP,
	CAPTURE_SCREEN_GRAB_MODE_WINDOW,
	CAPTURE_SCREEN_GRAB_MODE_REGION
} CaptureScreenGrabMode;

struct _CaptureCaptureDocklet {
	GObject parent_instance;
	CaptureCaptureDockletPrivate * priv;
};

struct _CaptureCaptureDockletClass {
	GObjectClass parent_class;
};

struct _CaptureCapturePreferences {
	PlankDockItemPreferences parent_instance;
	CaptureCapturePreferencesPrivate * priv;
	guint framerate;
	gint countdown;
	gchar* file_format;
	gchar* destination;
	gboolean show_notifications;
	gboolean copy_to_clipboard;
	gboolean auto_save;
	gboolean include_pointer;
};

struct _CaptureCapturePreferencesClass {
	PlankDockItemPreferencesClass parent_class;
};

struct _CaptureCapturePreview {
	GtkDialog parent_instance;
	CaptureCapturePreviewPrivate * priv;
	CaptureSequence* sequence;
};

struct _CaptureCapturePreviewClass {
	GtkDialogClass parent_class;
};

struct _CaptureCountdown {
	GTypeInstance parent_instance;
	volatile int ref_count;
	CaptureCountdownPrivate * priv;
	gint timer;
};

struct _CaptureCountdownClass {
	GTypeClass parent_class;
	void (*finalize) (CaptureCountdown *self);
};

typedef enum  {
	CAPTURE_DRAG_STATUS_NONE,
	CAPTURE_DRAG_STATUS_NORTHWEST,
	CAPTURE_DRAG_STATUS_NORTHEAST,
	CAPTURE_DRAG_STATUS_SOUTHEAST,
	CAPTURE_DRAG_STATUS_SOUTHWEST,
	CAPTURE_DRAG_STATUS_NORTH,
	CAPTURE_DRAG_STATUS_EAST,
	CAPTURE_DRAG_STATUS_SOUTH,
	CAPTURE_DRAG_STATUS_WEST,
	CAPTURE_DRAG_STATUS_MOVE
} CaptureDragStatus;

typedef enum  {
	CAPTURE_SELECTION_MODE_SELECTION,
	CAPTURE_SELECTION_MODE_FULL_SCREEN,
	CAPTURE_SELECTION_MODE_FULL_DISPLAY
} CaptureSelectionMode;

struct _CaptureRegionSelect {
	GraniteWidgetsCompositedWindow parent_instance;
	CaptureRegionSelectPrivate * priv;
	GtkDrawingArea* drawing_area;
	GdkDevice* mouse;
	GdkWindow* gwin;
	GdkRectangle selection;
};

struct _CaptureRegionSelectClass {
	GraniteWidgetsCompositedWindowClass parent_class;
};

struct _CaptureScreenGrabber {
	GTypeInstance parent_instance;
	volatile int ref_count;
	CaptureScreenGrabberPrivate * priv;
};

struct _CaptureScreenGrabberClass {
	GTypeClass parent_class;
	void (*finalize) (CaptureScreenGrabber *self);
};

struct _CaptureSequence {
	GTypeInstance parent_instance;
	volatile int ref_count;
	CaptureSequencePrivate * priv;
	GList* pixbufs;
};

struct _CaptureSequenceClass {
	GTypeClass parent_class;
	void (*finalize) (CaptureSequence *self);
};

struct _CaptureSettingsDialog {
	GtkDialog parent_instance;
	CaptureSettingsDialogPrivate * priv;
	GSettings* settings;
	GtkSpinButton* countdown_spin_button;
	GtkSpinButton* framerate_spin_button;
	GtkCheckButton* include_pointer_checkbutton;
	GtkCheckButton* auto_save_checkbutton;
	GtkCheckButton* show_notifications_checkbutton;
	GtkCheckButton* copy_to_clipboard_checkbutton;
	GtkFileChooserButton* destination_file_chooser_button;
	GraniteWidgetsModeButton* file_format_mode_button;
};

struct _CaptureSettingsDialogClass {
	GtkDialogClass parent_class;
};


#define CONSTANTS_DATADIR "/usr/lib/x86_64-linux-gnu/plank/docklets/share"
#define CONSTANTS_PKGDATADIR "/usr/lib/x86_64-linux-gnu/plank/docklets/share/docklet-capture"
#define CONSTANTS_GETTEXT_PACKAGE "docklet-capture"
#define CONSTANTS_RELEASE_NAME "docklet-capture"
#define CONSTANTS_VERSION "1.0.0"
GType capture_capture_mode_get_type (void) G_GNUC_CONST;
GType capture_capture_dock_item_get_type (void) G_GNUC_CONST;
CaptureCaptureDockItem* capture_capture_dock_item_new_with_dockitem_file (GFile* file);
CaptureCaptureDockItem* capture_capture_dock_item_construct_with_dockitem_file (GType object_type, GFile* file);
void capture_capture_dock_item_switch_capture_mode (CaptureCaptureDockItem* self, CaptureCaptureMode mode);
GType capture_screen_grab_mode_get_type (void) G_GNUC_CONST;
void capture_capture_dock_item_take_screenshot (CaptureCaptureDockItem* self, CaptureScreenGrabMode* mode);
void capture_capture_dock_item_shot (CaptureCaptureDockItem* self);
void capture_capture_dock_item_take_screencapture (CaptureCaptureDockItem* self, CaptureScreenGrabMode mode);
CaptureCaptureDockItem* capture_capture_dock_item_new (void);
CaptureCaptureDockItem* capture_capture_dock_item_construct (GType object_type);
void docklet_init (PlankDockletManager* manager);
#define CAPTURE_G_RESOURCE_PATH "/de/hannenz/capture"
GType capture_capture_docklet_get_type (void) G_GNUC_CONST;
CaptureCaptureDocklet* capture_capture_docklet_new (void);
CaptureCaptureDocklet* capture_capture_docklet_construct (GType object_type);
GType capture_capture_preferences_get_type (void) G_GNUC_CONST;
CaptureCapturePreferences* capture_capture_preferences_new_with_file (GFile* file);
CaptureCapturePreferences* capture_capture_preferences_construct_with_file (GType object_type, GFile* file);
CaptureCapturePreferences* capture_capture_preferences_new (void);
CaptureCapturePreferences* capture_capture_preferences_construct (GType object_type);
GType capture_capture_preview_get_type (void) G_GNUC_CONST;
gpointer capture_sequence_ref (gpointer instance);
void capture_sequence_unref (gpointer instance);
GParamSpec* capture_param_spec_sequence (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void capture_value_set_sequence (GValue* value, gpointer v_object);
void capture_value_take_sequence (GValue* value, gpointer v_object);
gpointer capture_value_get_sequence (const GValue* value);
GType capture_sequence_get_type (void) G_GNUC_CONST;
CaptureCapturePreview* capture_capture_preview_new (CaptureSequence* sequence);
CaptureCapturePreview* capture_capture_preview_construct (GType object_type, CaptureSequence* sequence);
void capture_capture_preview_run_sequence (CaptureCapturePreview* self);
gpointer capture_countdown_ref (gpointer instance);
void capture_countdown_unref (gpointer instance);
GParamSpec* capture_param_spec_countdown (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void capture_value_set_countdown (GValue* value, gpointer v_object);
void capture_value_take_countdown (GValue* value, gpointer v_object);
gpointer capture_value_get_countdown (const GValue* value);
GType capture_countdown_get_type (void) G_GNUC_CONST;
CaptureCountdown* capture_countdown_new (gint seconds);
CaptureCountdown* capture_countdown_construct (GType object_type, gint seconds);
void capture_countdown_start (CaptureCountdown* self);
gint capture_countdown_get_seconds (CaptureCountdown* self);
void capture_countdown_set_seconds (CaptureCountdown* self, gint value);
GType capture_drag_status_get_type (void) G_GNUC_CONST;
GType capture_selection_mode_get_type (void) G_GNUC_CONST;
GType capture_region_select_get_type (void) G_GNUC_CONST;
CaptureRegionSelect* capture_region_select_new (void);
CaptureRegionSelect* capture_region_select_construct (GType object_type);
GtkResponseType capture_region_select_run (CaptureRegionSelect* self);
void capture_region_select_get_selection (CaptureRegionSelect* self, GdkRectangle* result);
gboolean capture_region_select_on_draw (CaptureRegionSelect* self, cairo_t* ctx);
gpointer capture_screen_grabber_ref (gpointer instance);
void capture_screen_grabber_unref (gpointer instance);
GParamSpec* capture_param_spec_screen_grabber (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void capture_value_set_screen_grabber (GValue* value, gpointer v_object);
void capture_value_take_screen_grabber (GValue* value, gpointer v_object);
gpointer capture_value_get_screen_grabber (const GValue* value);
GType capture_screen_grabber_get_type (void) G_GNUC_CONST;
CaptureScreenGrabber* capture_screen_grabber_new (CaptureScreenGrabMode mode, gboolean include_cursor);
CaptureScreenGrabber* capture_screen_grabber_construct (GType object_type, CaptureScreenGrabMode mode, gboolean include_cursor);
GdkPixbuf* capture_screen_grabber_grab (CaptureScreenGrabber* self, GdkRectangle* selection);
CaptureScreenGrabber* capture_screen_grabber_new_from_region (gboolean include_cursor);
CaptureScreenGrabber* capture_screen_grabber_construct_from_region (GType object_type, gboolean include_cursor);
CaptureScreenGrabber* capture_screen_grabber_new_from_window (gboolean include_cursor);
CaptureScreenGrabber* capture_screen_grabber_construct_from_window (GType object_type, gboolean include_cursor);
CaptureScreenGrabber* capture_screen_grabber_new_from_desktop (gboolean include_cursor);
CaptureScreenGrabber* capture_screen_grabber_construct_from_desktop (GType object_type, gboolean include_cursor);
gboolean capture_screen_grabber_get_include_cursor (CaptureScreenGrabber* self);
void capture_screen_grabber_set_include_cursor (CaptureScreenGrabber* self, gboolean value);
GdkPixbuf* capture_screen_grabber_get_pixbuf (CaptureScreenGrabber* self);
void capture_screen_grabber_set_pixbuf (CaptureScreenGrabber* self, GdkPixbuf* value);
CaptureScreenGrabMode capture_screen_grabber_get_mode (CaptureScreenGrabber* self);
void capture_screen_grabber_set_mode (CaptureScreenGrabber* self, CaptureScreenGrabMode value);
CaptureSequence* capture_sequence_new (void);
CaptureSequence* capture_sequence_construct (GType object_type);
void capture_sequence_add (CaptureSequence* self, GdkPixbuf* pixbuf);
guint capture_sequence_length (CaptureSequence* self);
GdkPixbuf* capture_sequence_first (CaptureSequence* self);
GdkPixbuf* capture_sequence_next (CaptureSequence* self);
GdkPixbuf* capture_sequence_previous (CaptureSequence* self);
gboolean capture_sequence_save_to_animated_gif (CaptureSequence* self, const gchar* filename);
guint capture_sequence_get_frame (CaptureSequence* self);
void capture_sequence_set_frame (CaptureSequence* self, guint value);
guint capture_sequence_get_framerate (CaptureSequence* self);
void capture_sequence_set_framerate (CaptureSequence* self, guint value);
GType capture_settings_dialog_get_type (void) G_GNUC_CONST;
CaptureSettingsDialog* capture_settings_dialog_new (void);
CaptureSettingsDialog* capture_settings_dialog_construct (GType object_type);


G_END_DECLS

#endif
