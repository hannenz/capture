/* docklet-capture.vapi generated by valac-0.34 0.34.4, do not modify. */

namespace Constants {
	[CCode (cheader_filename = "docklet-capture.h")]
	public const string DATADIR;
	[CCode (cheader_filename = "docklet-capture.h")]
	public const string GETTEXT_PACKAGE;
	[CCode (cheader_filename = "docklet-capture.h")]
	public const string PKGDATADIR;
	[CCode (cheader_filename = "docklet-capture.h")]
	public const string RELEASE_NAME;
	[CCode (cheader_filename = "docklet-capture.h")]
	public const string VERSION;
}
namespace Capture {
	[CCode (cheader_filename = "docklet-capture.h")]
	public class CaptureDockItem : Plank.DockletItem {
		public CaptureDockItem ();
		public override Gee.ArrayList<Gtk.MenuItem> get_menu_items ();
		protected override Plank.AnimationType on_clicked (Plank.PopupButton button, Gdk.ModifierType mod, uint32 event_time);
		protected override Plank.AnimationType on_scrolled (Gdk.ScrollDirection dir, Gdk.ModifierType mod, uint32 event_time);
		protected void shot ();
		public void switch_capture_mode (Capture.CaptureMode mode);
		protected void take_screencapture (Capture.ScreenGrabMode mode);
		protected void take_screenshot (Capture.ScreenGrabMode? mode);
		public CaptureDockItem.with_dockitem_file (GLib.File file);
	}
	[CCode (cheader_filename = "docklet-capture.h")]
	public class CaptureDocklet : GLib.Object, Plank.Docklet {
		public CaptureDocklet ();
	}
	[CCode (cheader_filename = "docklet-capture.h")]
	public class CapturePreferences : Plank.DockItemPreferences {
		[Description (blurb = "Whether to auto save captures or ask user", nick = "autosave")]
		public bool auto_save;
		[Description (blurb = "Whether to copy screenshots to clipboard", nick = "copy-to-clipboard")]
		public bool copy_to_clipboard;
		[Description (blurb = "Nr. of seconds  for countdown", nick = "countdown")]
		public int countdown;
		[Description (blurb = "Destination path for saving captures", nick = "destination")]
		public string destination;
		[Description (blurb = "Output file format", nick = "file-format")]
		public string file_format;
		[Description (blurb = "Framerate for screen capture", nick = "framerate")]
		public uint framerate;
		[Description (blurb = "Whether to include the mouse pointer", nick = "include-pointer")]
		public bool include_pointer;
		[Description (blurb = "Whether to show notifications", nick = "show-notifications")]
		public bool show_notifications;
		public CapturePreferences ();
		protected override void reset_properties ();
		public CapturePreferences.with_file (GLib.File file);
	}
	[CCode (cheader_filename = "docklet-capture.h")]
	public class CapturePreview : Gtk.Dialog {
		public Capture.Sequence sequence;
		public CapturePreview (Capture.Sequence sequence);
		public void run_sequence ();
	}
	[CCode (cheader_filename = "docklet-capture.h")]
	public class Countdown {
		protected int timer;
		public Countdown (int seconds);
		public void start ();
		public int seconds { get; set; }
		public signal void ignition ();
		public signal void tick (int second, double progress);
	}
	[CCode (cheader_filename = "docklet-capture.h")]
	public class RegionSelect : Granite.Widgets.CompositedWindow {
		protected Gtk.DrawingArea drawing_area;
		protected Gdk.Window gwin;
		protected Gdk.Device mouse;
		public Gdk.Rectangle selection;
		public RegionSelect ();
		public Gdk.Rectangle get_selection ();
		protected bool on_draw (Cairo.Context ctx);
		public Gtk.ResponseType run ();
	}
	[CCode (cheader_filename = "docklet-capture.h")]
	public class ScreenGrabber {
		public ScreenGrabber (Capture.ScreenGrabMode mode, bool include_cursor);
		public ScreenGrabber.from_desktop (bool include_cursor);
		public ScreenGrabber.from_region (bool include_cursor);
		public ScreenGrabber.from_window (bool include_cursor);
		public Gdk.Pixbuf grab (Gdk.Rectangle? selection);
		public bool include_cursor { get; set; }
		public Capture.ScreenGrabMode mode { get; set; }
		public Gdk.Pixbuf pixbuf { get; set; }
		public signal void grabbed (Gdk.Pixbuf? pixbuf);
	}
	[CCode (cheader_filename = "docklet-capture.h")]
	public class Sequence {
		protected GLib.List<Gdk.Pixbuf> pixbufs;
		public Sequence ();
		public void add (Gdk.Pixbuf pixbuf);
		public Gdk.Pixbuf? first ();
		public uint length ();
		public Gdk.Pixbuf? next ();
		public Gdk.Pixbuf? previous ();
		public bool save_to_animated_gif (string filename);
		public uint frame { get; protected set; }
		public uint framerate { get; set; }
	}
	[CCode (cheader_filename = "docklet-capture.h")]
	public class SettingsDialog : Gtk.Dialog {
		protected Gtk.CheckButton auto_save_checkbutton;
		protected Gtk.CheckButton copy_to_clipboard_checkbutton;
		protected Gtk.SpinButton countdown_spin_button;
		protected Gtk.FileChooserButton destination_file_chooser_button;
		protected Granite.Widgets.ModeButton file_format_mode_button;
		protected Gtk.SpinButton framerate_spin_button;
		protected Gtk.CheckButton include_pointer_checkbutton;
		protected GLib.Settings settings;
		protected Gtk.CheckButton show_notifications_checkbutton;
		public SettingsDialog ();
	}
	[CCode (cheader_filename = "docklet-capture.h")]
	public enum CaptureMode {
		SCREENSHOT,
		SCREENCAST
	}
	[CCode (cheader_filename = "docklet-capture.h")]
	public enum DragStatus {
		NONE,
		NORTHWEST,
		NORTHEAST,
		SOUTHEAST,
		SOUTHWEST,
		NORTH,
		EAST,
		SOUTH,
		WEST,
		MOVE
	}
	[CCode (cheader_filename = "docklet-capture.h")]
	public enum ScreenGrabMode {
		DESKTOP,
		WINDOW,
		REGION
	}
	[CCode (cheader_filename = "docklet-capture.h")]
	public enum SelectionMode {
		SELECTION,
		FULL_SCREEN,
		FULL_DISPLAY
	}
	[CCode (cheader_filename = "docklet-capture.h")]
	public const string G_RESOURCE_PATH;
}
[CCode (cheader_filename = "docklet-capture.h")]
public static void docklet_init (Plank.DockletManager manager);
